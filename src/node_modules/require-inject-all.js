const glob = require('glob')
const path = require('path');
const util = require('util');

globber = util.promisify(glob);

/**
 * Require all the files / folders
 * as modules in the given directory. 
 * 
 * Then the required module will be invoked
 * where the remaining arguments are passed 
 * as parameters uniformly to each module. 
 * 
 * Each module is expexted to return a function
 * to be exectued where the return function must 
 * return a promise 
 * 
 * @param {path to directory} directory 
 * @param  {...any} args 
 */

const promiseSerial = funcs =>
  funcs.reduce((promise, func) =>
    promise.then(result => func().then(Array.prototype.concat.bind(result))),
    Promise.resolve([]))

module.exports = async function requireAll(directories, ...args) {

  if (!(directories instanceof Array)) directories = [directories];

  const dirFiles = await Promise.all(directories.map(directory => {
    return globber(directory + '/*');
  }))

  const files = dirFiles.reduce((prev, cur) => {
    return prev.concat(cur);
  }, []).filter(file => {
    return file.indexOf('.map')<0;
  })
  
  return promiseSerial(files.sort().map(function(file) {
    return function() {
      let mod = require(file);
      return mod.apply(null, args);
    }
  }));
  
}